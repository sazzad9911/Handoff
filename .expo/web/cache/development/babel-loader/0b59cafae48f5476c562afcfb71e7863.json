{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useRef } from 'react';\nimport { makeMutable } from \"./core\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar scheduleUpdates = Platform.OS === 'web' ? requestAnimationFrame : setImmediate;\nexport function makeViewDescriptorsSet() {\n  var ref = useRef(null);\n\n  if (ref.current === null) {\n    var data = {\n      batchToRemove: new Set(),\n      tags: new Set(),\n      waitForInsertSync: false,\n      waitForRemoveSync: false,\n      sharableViewDescriptors: makeMutable([]),\n      items: [],\n      add: function add(item) {\n        if (data.tags.has(item.tag)) {\n          return;\n        }\n\n        data.tags.add(item.tag);\n        data.items.push(item);\n\n        if (!data.waitForInsertSync) {\n          data.waitForInsertSync = true;\n          scheduleUpdates(function () {\n            data.sharableViewDescriptors.value = data.items;\n            data.waitForInsertSync = false;\n          });\n        }\n      },\n      remove: function remove(viewTag) {\n        data.batchToRemove.add(viewTag);\n\n        if (!data.waitForRemoveSync) {\n          data.waitForRemoveSync = true;\n          scheduleUpdates(function () {\n            var items = [];\n\n            for (var _iterator = _createForOfIteratorHelperLoose(data.items), _step; !(_step = _iterator()).done;) {\n              var item = _step.value;\n\n              if (data.batchToRemove.has(item.tag)) {\n                data.tags.delete(item.tag);\n              } else {\n                items.push(item);\n              }\n            }\n\n            data.items = items;\n            data.sharableViewDescriptors.value = items;\n            data.batchToRemove = new Set();\n            data.waitForRemoveSync = false;\n          });\n        }\n      },\n      rebuildsharableViewDescriptors: function rebuildsharableViewDescriptors(sharableViewDescriptors) {\n        data.sharableViewDescriptors = sharableViewDescriptors;\n      }\n    };\n    ref.current = data;\n  }\n\n  return ref.current;\n}\nexport function makeViewsRefSet() {\n  var ref = useRef(null);\n\n  if (ref.current === null) {\n    var data = {\n      items: new Set(),\n      add: function add(item) {\n        if (data.items.has(item)) return;\n        data.items.add(item);\n      },\n      remove: function remove(item) {\n        data.items.delete(item);\n      }\n    };\n    ref.current = data;\n  }\n\n  return ref.current;\n}","map":{"version":3,"sources":["C:/Users/takia/OneDrive/Desktop/Data/Projects/mobile_app/mobile_app/Handoff/node_modules/react-native-reanimated/lib/reanimated2/ViewDescriptorsSet.js"],"names":["useRef","makeMutable","scheduleUpdates","Platform","OS","requestAnimationFrame","setImmediate","makeViewDescriptorsSet","ref","current","data","batchToRemove","Set","tags","waitForInsertSync","waitForRemoveSync","sharableViewDescriptors","items","add","item","has","tag","push","value","remove","viewTag","delete","rebuildsharableViewDescriptors","makeViewsRefSet"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT;;AAEA,IAAMC,eAAe,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBC,qBAAxB,GAAgDC,YAAxE;AACA,OAAO,SAASC,sBAAT,GAAkC;AACrC,MAAMC,GAAG,GAAGR,MAAM,CAAC,IAAD,CAAlB;;AACA,MAAIQ,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;AACtB,QAAMC,IAAI,GAAG;AACTC,MAAAA,aAAa,EAAE,IAAIC,GAAJ,EADN;AAETC,MAAAA,IAAI,EAAE,IAAID,GAAJ,EAFG;AAGTE,MAAAA,iBAAiB,EAAE,KAHV;AAITC,MAAAA,iBAAiB,EAAE,KAJV;AAKTC,MAAAA,uBAAuB,EAAEf,WAAW,CAAC,EAAD,CAL3B;AAMTgB,MAAAA,KAAK,EAAE,EANE;AAOTC,MAAAA,GAAG,EAAE,aAACC,IAAD,EAAU;AACX,YAAIT,IAAI,CAACG,IAAL,CAAUO,GAAV,CAAcD,IAAI,CAACE,GAAnB,CAAJ,EAA6B;AACzB;AACH;;AACDX,QAAAA,IAAI,CAACG,IAAL,CAAUK,GAAV,CAAcC,IAAI,CAACE,GAAnB;AACAX,QAAAA,IAAI,CAACO,KAAL,CAAWK,IAAX,CAAgBH,IAAhB;;AACA,YAAI,CAACT,IAAI,CAACI,iBAAV,EAA6B;AACzBJ,UAAAA,IAAI,CAACI,iBAAL,GAAyB,IAAzB;AACAZ,UAAAA,eAAe,CAAC,YAAM;AAClBQ,YAAAA,IAAI,CAACM,uBAAL,CAA6BO,KAA7B,GAAqCb,IAAI,CAACO,KAA1C;AACAP,YAAAA,IAAI,CAACI,iBAAL,GAAyB,KAAzB;AACH,WAHc,CAAf;AAIH;AACJ,OApBQ;AAqBTU,MAAAA,MAAM,EAAE,gBAACC,OAAD,EAAa;AACjBf,QAAAA,IAAI,CAACC,aAAL,CAAmBO,GAAnB,CAAuBO,OAAvB;;AACA,YAAI,CAACf,IAAI,CAACK,iBAAV,EAA6B;AACzBL,UAAAA,IAAI,CAACK,iBAAL,GAAyB,IAAzB;AACAb,UAAAA,eAAe,CAAC,YAAM;AAClB,gBAAMe,KAAK,GAAG,EAAd;;AACA,iEAAmBP,IAAI,CAACO,KAAxB,wCAA+B;AAAA,kBAApBE,IAAoB;;AAC3B,kBAAIT,IAAI,CAACC,aAAL,CAAmBS,GAAnB,CAAuBD,IAAI,CAACE,GAA5B,CAAJ,EAAsC;AAClCX,gBAAAA,IAAI,CAACG,IAAL,CAAUa,MAAV,CAAiBP,IAAI,CAACE,GAAtB;AACH,eAFD,MAGK;AACDJ,gBAAAA,KAAK,CAACK,IAAN,CAAWH,IAAX;AACH;AACJ;;AACDT,YAAAA,IAAI,CAACO,KAAL,GAAaA,KAAb;AACAP,YAAAA,IAAI,CAACM,uBAAL,CAA6BO,KAA7B,GAAqCN,KAArC;AACAP,YAAAA,IAAI,CAACC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACAF,YAAAA,IAAI,CAACK,iBAAL,GAAyB,KAAzB;AACH,WAdc,CAAf;AAeH;AACJ,OAzCQ;AA0CTY,MAAAA,8BAA8B,EAAE,wCAACX,uBAAD,EAA6B;AACzDN,QAAAA,IAAI,CAACM,uBAAL,GAA+BA,uBAA/B;AACH;AA5CQ,KAAb;AA8CAR,IAAAA,GAAG,CAACC,OAAJ,GAAcC,IAAd;AACH;;AACD,SAAOF,GAAG,CAACC,OAAX;AACH;AACD,OAAO,SAASmB,eAAT,GAA2B;AAC9B,MAAMpB,GAAG,GAAGR,MAAM,CAAC,IAAD,CAAlB;;AACA,MAAIQ,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;AACtB,QAAMC,IAAI,GAAG;AACTO,MAAAA,KAAK,EAAE,IAAIL,GAAJ,EADE;AAETM,MAAAA,GAAG,EAAE,aAACC,IAAD,EAAU;AACX,YAAIT,IAAI,CAACO,KAAL,CAAWG,GAAX,CAAeD,IAAf,CAAJ,EACI;AACJT,QAAAA,IAAI,CAACO,KAAL,CAAWC,GAAX,CAAeC,IAAf;AACH,OANQ;AAOTK,MAAAA,MAAM,EAAE,gBAACL,IAAD,EAAU;AACdT,QAAAA,IAAI,CAACO,KAAL,CAAWS,MAAX,CAAkBP,IAAlB;AACH;AATQ,KAAb;AAWAX,IAAAA,GAAG,CAACC,OAAJ,GAAcC,IAAd;AACH;;AACD,SAAOF,GAAG,CAACC,OAAX;AACH","sourcesContent":["import { useRef } from 'react';\r\nimport { makeMutable } from './core';\r\nimport { Platform } from 'react-native';\r\nconst scheduleUpdates = Platform.OS === 'web' ? requestAnimationFrame : setImmediate;\r\nexport function makeViewDescriptorsSet() {\r\n    const ref = useRef(null);\r\n    if (ref.current === null) {\r\n        const data = {\r\n            batchToRemove: new Set(),\r\n            tags: new Set(),\r\n            waitForInsertSync: false,\r\n            waitForRemoveSync: false,\r\n            sharableViewDescriptors: makeMutable([]),\r\n            items: [],\r\n            add: (item) => {\r\n                if (data.tags.has(item.tag)) {\r\n                    return;\r\n                }\r\n                data.tags.add(item.tag);\r\n                data.items.push(item);\r\n                if (!data.waitForInsertSync) {\r\n                    data.waitForInsertSync = true;\r\n                    scheduleUpdates(() => {\r\n                        data.sharableViewDescriptors.value = data.items;\r\n                        data.waitForInsertSync = false;\r\n                    });\r\n                }\r\n            },\r\n            remove: (viewTag) => {\r\n                data.batchToRemove.add(viewTag);\r\n                if (!data.waitForRemoveSync) {\r\n                    data.waitForRemoveSync = true;\r\n                    scheduleUpdates(() => {\r\n                        const items = [];\r\n                        for (const item of data.items) {\r\n                            if (data.batchToRemove.has(item.tag)) {\r\n                                data.tags.delete(item.tag);\r\n                            }\r\n                            else {\r\n                                items.push(item);\r\n                            }\r\n                        }\r\n                        data.items = items;\r\n                        data.sharableViewDescriptors.value = items;\r\n                        data.batchToRemove = new Set();\r\n                        data.waitForRemoveSync = false;\r\n                    });\r\n                }\r\n            },\r\n            rebuildsharableViewDescriptors: (sharableViewDescriptors) => {\r\n                data.sharableViewDescriptors = sharableViewDescriptors;\r\n            },\r\n        };\r\n        ref.current = data;\r\n    }\r\n    return ref.current;\r\n}\r\nexport function makeViewsRefSet() {\r\n    const ref = useRef(null);\r\n    if (ref.current === null) {\r\n        const data = {\r\n            items: new Set(),\r\n            add: (item) => {\r\n                if (data.items.has(item))\r\n                    return;\r\n                data.items.add(item);\r\n            },\r\n            remove: (item) => {\r\n                data.items.delete(item);\r\n            },\r\n        };\r\n        ref.current = data;\r\n    }\r\n    return ref.current;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}