{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  getViewManagerConfig: function getViewManagerConfig(viewManagerName) {\n    console.warn('Attempting to get config for view manager: ' + viewManagerName);\n\n    if (viewManagerName === 'RCTVirtualText') {\n      return {};\n    }\n\n    return null;\n  },\n  getConstants: function getConstants() {\n    return {};\n  },\n  getConstantsForViewManager: function getConstantsForViewManager(viewManagerName) {},\n  getDefaultEventTypes: function getDefaultEventTypes() {\n    return [];\n  },\n  lazilyLoadView: function lazilyLoadView(name) {},\n  createView: function createView(reactTag, viewName, rootTag, props) {},\n  updateView: function updateView(reactTag, viewName, props) {},\n  focus: function focus(reactTag) {},\n  blur: function blur(reactTag) {},\n  findSubviewIn: function findSubviewIn(reactTag, point, callback) {},\n  dispatchViewManagerCommand: function dispatchViewManagerCommand(reactTag, commandID, commandArgs) {},\n  measure: function measure(reactTag, callback) {},\n  measureInWindow: function measureInWindow(reactTag, callback) {},\n  viewIsDescendantOf: function viewIsDescendantOf(reactTag, ancestorReactTag, callback) {},\n  measureLayout: function measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {},\n  measureLayoutRelativeToParent: function measureLayoutRelativeToParent(reactTag, errorCallback, callback) {},\n  setJSResponder: function setJSResponder(reactTag, blockNativeResponder) {},\n  clearJSResponder: function clearJSResponder() {},\n  configureNextLayoutAnimation: function configureNextLayoutAnimation(config, callback, errorCallback) {},\n  removeSubviewsFromContainerWithID: function removeSubviewsFromContainerWithID(containerID) {},\n  replaceExistingNonRootView: function replaceExistingNonRootView(reactTag, newReactTag) {},\n  setChildren: function setChildren(containerTag, reactTags) {},\n  manageChildren: function manageChildren(containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) {},\n  setLayoutAnimationEnabledExperimental: function setLayoutAnimationEnabledExperimental(enabled) {},\n  sendAccessibilityEvent: function sendAccessibilityEvent(reactTag, eventType) {},\n  showPopupMenu: function showPopupMenu(reactTag, items, error, success) {},\n  dismissPopupMenu: function dismissPopupMenu() {}\n};","map":{"version":3,"sources":["C:/Project/HTML/MyProfile/Handoff/node_modules/react-native/Libraries/ReactNative/DummyUIManager.js"],"names":["module","exports","getViewManagerConfig","viewManagerName","console","warn","getConstants","getConstantsForViewManager","getDefaultEventTypes","lazilyLoadView","name","createView","reactTag","viewName","rootTag","props","updateView","focus","blur","findSubviewIn","point","callback","dispatchViewManagerCommand","commandID","commandArgs","measure","measureInWindow","viewIsDescendantOf","ancestorReactTag","measureLayout","errorCallback","measureLayoutRelativeToParent","setJSResponder","blockNativeResponder","clearJSResponder","configureNextLayoutAnimation","config","removeSubviewsFromContainerWithID","containerID","replaceExistingNonRootView","newReactTag","setChildren","containerTag","reactTags","manageChildren","moveFromIndices","moveToIndices","addChildReactTags","addAtIndices","removeAtIndices","setLayoutAnimationEnabledExperimental","enabled","sendAccessibilityEvent","eventType","showPopupMenu","items","error","success","dismissPopupMenu"],"mappings":"AAUA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,oBAAoB,EAAE,8BAACC,eAAD,EAAoC;AACxDC,IAAAA,OAAO,CAACC,IAAR,CACE,gDAAgDF,eADlD;;AAGA,QAAIA,eAAe,KAAK,gBAAxB,EAA0C;AACxC,aAAO,EAAP;AACD;;AACD,WAAO,IAAP;AACD,GATc;AAUfG,EAAAA,YAAY,EAAE;AAAA,WAAc,EAAd;AAAA,GAVC;AAWfC,EAAAA,0BAA0B,EAAE,oCAACJ,eAAD,EAA6B,CAAE,CAX5C;AAYfK,EAAAA,oBAAoB,EAAE;AAAA,WAAyB,EAAzB;AAAA,GAZP;AAafC,EAAAA,cAAc,EAAE,wBAACC,IAAD,EAAkB,CAAE,CAbrB;AAcfC,EAAAA,UAAU,EAAE,oBACVC,QADU,EAEVC,QAFU,EAGVC,OAHU,EAIVC,KAJU,EAKP,CAAE,CAnBQ;AAoBfC,EAAAA,UAAU,EAAE,oBAACJ,QAAD,EAAmBC,QAAnB,EAAqCE,KAArC,EAAuD,CAAE,CApBtD;AAqBfE,EAAAA,KAAK,EAAE,eAACL,QAAD,EAAuB,CAAE,CArBjB;AAsBfM,EAAAA,IAAI,EAAE,cAACN,QAAD,EAAuB,CAAE,CAtBhB;AAuBfO,EAAAA,aAAa,EAAE,uBACbP,QADa,EAEbQ,KAFa,EAGbC,QAHa,EAUV,CAAE,CAjCQ;AAkCfC,EAAAA,0BAA0B,EAAE,oCAC1BV,QAD0B,EAE1BW,SAF0B,EAG1BC,WAH0B,EAIvB,CAAE,CAtCQ;AAuCfC,EAAAA,OAAO,EAAE,iBACPb,QADO,EAEPS,QAFO,EAUJ,CAAE,CAjDQ;AAkDfK,EAAAA,eAAe,EAAE,yBACfd,QADe,EAEfS,QAFe,EAGZ,CAAE,CArDQ;AAsDfM,EAAAA,kBAAkB,EAAE,4BAClBf,QADkB,EAElBgB,gBAFkB,EAGlBP,QAHkB,EAIf,CAAE,CA1DQ;AA2DfQ,EAAAA,aAAa,EAAE,uBACbjB,QADa,EAEbgB,gBAFa,EAGbE,aAHa,EAIbT,QAJa,EAUV,CAAE,CArEQ;AAsEfU,EAAAA,6BAA6B,EAAE,uCAC7BnB,QAD6B,EAE7BkB,aAF6B,EAG7BT,QAH6B,EAS1B,CAAE,CA/EQ;AAgFfW,EAAAA,cAAc,EAAE,wBAACpB,QAAD,EAAoBqB,oBAApB,EAAsD,CAAE,CAhFzD;AAiFfC,EAAAA,gBAAgB,EAAE,4BAAM,CAAE,CAjFX;AAkFfC,EAAAA,4BAA4B,EAAE,sCAC5BC,MAD4B,EAE5Bf,QAF4B,EAG5BS,aAH4B,EAIzB,CAAE,CAtFQ;AAuFfO,EAAAA,iCAAiC,EAAE,2CAACC,WAAD,EAAyB,CAAE,CAvF/C;AAwFfC,EAAAA,0BAA0B,EAAE,oCAAC3B,QAAD,EAAoB4B,WAApB,EAA6C,CAAE,CAxF5D;AAyFfC,EAAAA,WAAW,EAAE,qBAACC,YAAD,EAAwBC,SAAxB,EAAqD,CAAE,CAzFrD;AA0FfC,EAAAA,cAAc,EAAE,wBACdF,YADc,EAEdG,eAFc,EAGdC,aAHc,EAIdC,iBAJc,EAKdC,YALc,EAMdC,eANc,EAOX,CAAE,CAjGQ;AAoGfC,EAAAA,qCAAqC,EAAE,+CAACC,OAAD,EAAsB,CAAE,CApGhD;AAqGfC,EAAAA,sBAAsB,EAAE,gCAACxC,QAAD,EAAoByC,SAApB,EAA0C,CAAE,CArGrD;AAsGfC,EAAAA,aAAa,EAAE,uBACb1C,QADa,EAEb2C,KAFa,EAGbC,KAHa,EAIbC,OAJa,EAKV,CAAE,CA3GQ;AA4GfC,EAAAA,gBAAgB,EAAE,4BAAM,CAAE;AA5GX,CAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n  getViewManagerConfig: (viewManagerName: string): mixed => {\r\n    console.warn(\r\n      'Attempting to get config for view manager: ' + viewManagerName,\r\n    );\r\n    if (viewManagerName === 'RCTVirtualText') {\r\n      return {};\r\n    }\r\n    return null;\r\n  },\r\n  getConstants: (): {...} => ({}),\r\n  getConstantsForViewManager: (viewManagerName: string) => {},\r\n  getDefaultEventTypes: (): Array<$FlowFixMe> => [],\r\n  lazilyLoadView: (name: string) => {},\r\n  createView: (\r\n    reactTag: ?number,\r\n    viewName: string,\r\n    rootTag: number,\r\n    props: Object,\r\n  ) => {},\r\n  updateView: (reactTag: number, viewName: string, props: Object) => {},\r\n  focus: (reactTag: ?number) => {},\r\n  blur: (reactTag: ?number) => {},\r\n  findSubviewIn: (\r\n    reactTag: ?number,\r\n    point: Array<number>,\r\n    callback: (\r\n      nativeViewTag: number,\r\n      left: number,\r\n      top: number,\r\n      width: number,\r\n      height: number,\r\n    ) => void,\r\n  ) => {},\r\n  dispatchViewManagerCommand: (\r\n    reactTag: ?number,\r\n    commandID: number,\r\n    commandArgs: ?Array<string | number | boolean>,\r\n  ) => {},\r\n  measure: (\r\n    reactTag: ?number,\r\n    callback: (\r\n      left: number,\r\n      top: number,\r\n      width: number,\r\n      height: number,\r\n      pageX: number,\r\n      pageY: number,\r\n    ) => void,\r\n  ) => {},\r\n  measureInWindow: (\r\n    reactTag: ?number,\r\n    callback: (x: number, y: number, width: number, height: number) => void,\r\n  ) => {},\r\n  viewIsDescendantOf: (\r\n    reactTag: ?number,\r\n    ancestorReactTag: ?number,\r\n    callback: (result: Array<boolean>) => void,\r\n  ) => {},\r\n  measureLayout: (\r\n    reactTag: ?number,\r\n    ancestorReactTag: ?number,\r\n    errorCallback: (error: Object) => void,\r\n    callback: (\r\n      left: number,\r\n      top: number,\r\n      width: number,\r\n      height: number,\r\n    ) => void,\r\n  ) => {},\r\n  measureLayoutRelativeToParent: (\r\n    reactTag: ?number,\r\n    errorCallback: (error: Object) => void,\r\n    callback: (\r\n      left: number,\r\n      top: number,\r\n      width: number,\r\n      height: number,\r\n    ) => void,\r\n  ) => {},\r\n  setJSResponder: (reactTag: ?number, blockNativeResponder: boolean) => {},\r\n  clearJSResponder: () => {},\r\n  configureNextLayoutAnimation: (\r\n    config: Object,\r\n    callback: () => void,\r\n    errorCallback: (error: Object) => void,\r\n  ) => {},\r\n  removeSubviewsFromContainerWithID: (containerID: number) => {},\r\n  replaceExistingNonRootView: (reactTag: ?number, newReactTag: ?number) => {},\r\n  setChildren: (containerTag: ?number, reactTags: Array<number>) => {},\r\n  manageChildren: (\r\n    containerTag: ?number,\r\n    moveFromIndices: Array<number>,\r\n    moveToIndices: Array<number>,\r\n    addChildReactTags: Array<number>,\r\n    addAtIndices: Array<number>,\r\n    removeAtIndices: Array<number>,\r\n  ) => {},\r\n\r\n  // Android only\r\n  setLayoutAnimationEnabledExperimental: (enabled: boolean) => {},\r\n  sendAccessibilityEvent: (reactTag: ?number, eventType: number) => {},\r\n  showPopupMenu: (\r\n    reactTag: ?number,\r\n    items: Array<string>,\r\n    error: (error: Object) => void,\r\n    success: (event: string, selected?: number) => void,\r\n  ) => {},\r\n  dismissPopupMenu: () => {},\r\n};\r\n"]},"metadata":{},"sourceType":"script"}